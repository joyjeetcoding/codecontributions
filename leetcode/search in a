class Solution {
public:
    int getPivot(vector<int> &nums, int n)
    {
        int s = 0;
        int e = n-1;
        int mid = s + (e-s)/2;
        
        while(s < e)
        {
            if(nums[mid] >= nums[0])
                s = mid+1;
            else
                e = mid;
            mid = s+(e-s)/2;
        }
        return s;
    }
    
    int bsearch(vector<int> &nums, int s, int k, int e)
    {
        int mid = s + (e-s)/2;
        
        while(s <= e)
        {
            if(nums[mid] == k)
                return mid;
            else if(nums[mid] < k)
            {
                s = mid+1;
            }
            else
                e = mid - 1;
            mid = s + (e-s)/2;
        }
        return -1;
    }
    
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int pivot = getPivot(nums, n);
        
        if(target >= nums[pivot] && target <= nums[n-1])
        {//first line
            return bsearch(nums,pivot,target,n-1);
        }
        else
        {//second line
            return bsearch(nums,0,target,pivot-1);
        }
    }
};
